{"version":3,"sources":["node_modules/nanographql/index.js","index.js"],"names":["gql","require","navigator","appendCensus","res","fetch","console","log","data","json","document","body","append","JSON","stringify","query","appendGraphQL","method","mode","headers","err","error","serviceWorker","register","then","ready","setTimeout"],"mappings":"ACAA,ADAA;ACCA,ADAA,MCAMA,GAAG,GAAGC,OAAO,CAAC,aAAD,CAAnB;ADCA;ACCA,ADAA,ICAI,EAAE,mBAAmBC,SAArB,CAAJ,EAAqC;AACnC,ADAF;ACCC,ADAD;AACA;ACCA,ADAA,MCAMC,YAAY,GAAG,YAAY;AAC/B,ADAF,QCAQC,GAAG,GAAG,MAAMC,KAAK,CACrB,4EADqB,CAAvB;AAGAC,ADFF,ECEEA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BH,GAA3B;AACA,ADFF,QCEQI,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAJ,EAAnB;AACAC,ADFF,ECEEA,QAAQ,CAACC,IAAT,CAAcC,MAAd,CAAqBC,IAAI,CAACC,SAAL,CAAeN,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAArB;AACD,ADFD,CCLA;ADMA;ACGA,ADFA,MCEMO,KAAK,GAAGf,GAAI;ADDlB;AACA;AACA;;;;;;;;CCDA;;AAaA,MAAMgB,aAAa,GAAG,YAAY;AAChC,MAAI;AACF,UAAMZ,GAAG,GAAG,MAAMC,KAAK,CAAC,2BAAD,EAA8B;AACnDM,MAAAA,IAAI,EAAEI,KAAK,EADwC;AAEnDE,MAAAA,MAAM,EAAE,MAF2C;AAGnDC,MAAAA,IAAI,EAAE,MAH6C;AAInDC,MAAAA,OAAO,EAAE;AACP,kBAAU,kBADH;AAEP,2BAAmB,mBAFZ;AAGP,2BAAmB,8CAHZ;AAIP,sBAAc,YAJP;AAKP,0BAAkB,KALX;AAMP,wBAAgB,kBANT;AAOP,eAAO;AAPA;AAJ0C,KAA9B,CAAvB;AAcA,UAAMX,IAAI,GAAG,MAAMJ,GAAG,CAACK,IAAJ,EAAnB;AACAC,IAAAA,QAAQ,CAACC,IAAT,CAAcC,MAAd,CAAqBC,IAAI,CAACC,SAAL,CAAeN,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAArB;AACD,GAjBD,CAiBE,OAAOY,GAAP,EAAY;AACZd,IAAAA,OAAO,CAACe,KAAR,CAAc,yBAAd,EAAyCD,GAAzC;AACD;AACF,CArBD;;AAuBAlB,SAAS,CAACoB,aAAV,CACGC,QADH,CACY,sCADZ,EAEGC,IAFH,CAEQtB,SAAS,CAACoB,aAAV,CAAwBG,KAFhC,EAGGD,IAHH,CAGQ,YAAW;AACf;AACA;AACA;AACA;AACA;AACAR,EAAAA,aAAa;AACbb,EAAAA,YAAY;AACb,CAXH;AAaAuB,UAAU,CAAC,MAAMV,aAAa,EAApB,EAAwB,IAAxB,CAAV;AACAU,UAAU,CAAC,MAAMvB,YAAY,EAAnB,EAAuB,IAAvB,CAAV","file":"backup.e31bb0bc.js","sourceRoot":"..","sourcesContent":["module.exports = nanographql\n\nvar getOpname = /(query|mutation) ?([\\w\\d-_]+)? ?\\(.*?\\)? \\{/\n\nfunction nanographql (str) {\n  str = Array.isArray(str) ? str.join('') : str\n  var name = getOpname.exec(str)\n  return function (variables) {\n    var data = { query: str }\n    if (variables) data.variables = JSON.stringify(variables)\n    if (name && name.length) {\n      var operationName = name[2]\n      if (operationName) data.operationName = name[2]\n    }\n    return JSON.stringify(data)\n  }\n}\n","// import swivel from 'swivel'\r\nconst gql = require('nanographql')\r\n\r\nif (!('serviceWorker' in navigator)) {\r\n  return\r\n}\r\n\r\nconst appendCensus = async () => {\r\n  const res = await fetch(\r\n    'https://api.census.gov/data/2017/acs/acs5?get=NAME,B01001_001E&for=state:*'\r\n  )\r\n  console.log('DATA BITCH:', res)\r\n  const data = await res.json()\r\n  document.body.append(JSON.stringify(data, null, 2))\r\n}\r\n\r\nconst query = gql`\r\n  query {\r\n    allCinemaDetails(before: \"2017-10-04\", after: \"2010-01-01\") {\r\n      edges {\r\n        node {\r\n          slug\r\n          hallName\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n\r\nconst appendGraphQL = async () => {\r\n  try {\r\n    const res = await fetch('https://etmdb.com/graphql', {\r\n      body: query(),\r\n      method: 'POST',\r\n      mode: 'cors',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Accept-Encoding': 'gzip, deflate, br',\r\n        'Accept-Language': 'en-US,en;q=0.9,pt-PT;q=0.8,pt;q=0.7,fr;q=0.6',\r\n        'Connection': 'keep-alive',\r\n        'Content-Length': '192',\r\n        'Content-Type': 'application/json',\r\n        'DNT': '1',\r\n      },\r\n    })\r\n    const data = await res.json()\r\n    document.body.append(JSON.stringify(data, null, 2))\r\n  } catch (err) {\r\n    console.error('ERROR In graqphl fetch:', err)\r\n  }\r\n}\r\n\r\nnavigator.serviceWorker\r\n  .register('sw.js')\r\n  .then(navigator.serviceWorker.ready)\r\n  .then(function() {\r\n    // swivel.on('data', function handler(context, ...data) {\r\n    //   console.log('swivel `context`:', context)\r\n    //   console.log('swivel `data`:', data)\r\n    //   context.reply('data', 'BLOOP')\r\n    // })\r\n    appendGraphQL()\r\n    appendCensus()\r\n  })\r\n\r\nsetTimeout(() => appendGraphQL(), 3000)\r\nsetTimeout(() => appendCensus(), 6000)\r\n"]}