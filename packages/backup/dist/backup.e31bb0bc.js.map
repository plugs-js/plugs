{"version":3,"sources":["node_modules/nanographql/index.js","index.js"],"names":["gql","require","navigator","appendCensus","res","fetch","data","json","document","body","append","JSON","stringify","query1","query2","headers","appendGraphQL","url","query","replace","method","err","console","error","serviceWorker","register","then","ready","setTimeout"],"mappings":"ACAA,ADAA;ACCA,ADAA,MCAMA,GAAG,GAAGC,OAAO,CAAC,aAAD,CAAnB;ADCA;ACCA,ADAA,ICAI,EAAE,mBAAmBC,SAArB,CAAJ,EAAqC;AACnC,ADAF;ACCC,ADAD;AACA;ACCA,ADAA,MCAMC,YAAY,GAAG,YAAY;AAC/B,ADAF,QCAQC,GAAG,GAAG,MAAMC,KAAK,CACrB,4EADqB,CAAvB;AAGA,ADFF,QCEQC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACAC,ADFF,ECEEA,QAAQ,CAACC,IAAT,CAAcC,MAAd,CAAqBC,IAAI,CAACC,SAAL,CAAeN,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAArB;AACD,ADFD,CCJA;ADKA;ACGA,ADFA,MCEMO,MAAM,GAAGb,GAAI;ADDnB;AACA;AACA;AACA;;;;;;;CCFA;AAYA,MAAMc,MAAM,GAAGd,GAAI;;;;;;;;;;;;;CAAnB;AAcA,MAAMe,OAAO,GAAG;AACd,YAAU,kBADI;AAEd,gBAAc,YAFA;AAGd,kBAAgB;AAHF,CAAhB;;AAMA,MAAMC,aAAa,GAAG,OAAOC,GAAP,EAAYC,KAAZ,KAAsB;AAC1C;AACA,MAAI;AACF,UAAMd,GAAG,GAAG,MAAMC,KAAK,CAAE,GAAEY,GAAI,IAAGC,KAAK,EAAG,EAAlB,CAAoBC,OAApB,CAA4B,aAA5B,EAA2C,EAA3C,CAAD,EAAiD;AACtEV,MAAAA,IAAI,EAAES,KAAK,EAD2D;AAEtEE,MAAAA,MAAM,EAAE,MAF8D;AAGtE;AACAL,MAAAA;AAJsE,KAAjD,CAAvB;AAMA,UAAMT,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACAC,IAAAA,QAAQ,CAACC,IAAT,CAAcC,MAAd,CAAqBC,IAAI,CAACC,SAAL,CAAeN,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAArB;AACD,GATD,CASE,OAAOe,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,KAAR,CAAc,yBAAd,EAAyCF,GAAzC;AACD;AACF,CAdD;;AAgBAnB,SAAS,CAACsB,aAAV,CACGC,QADH,CACY,sCADZ,EAEGC,IAFH,CAEQxB,SAAS,CAACsB,aAAV,CAAwBG,KAFhC,EAGGD,IAHH,CAGQ,YAAW;AACf;AACA;AACA;AACA;AACA;AACAV,EAAAA,aAAa,CAAC,2BAAD,EAA8BH,MAA9B,CAAb;AACAV,EAAAA,YAAY;AACb,CAXH;AAaAyB,UAAU,CAAC,MAAMZ,aAAa,CAAC,2BAAD,EAA8BH,MAA9B,CAApB,EAA2D,IAA3D,CAAV;AACAe,UAAU,CACR,MACEZ,aAAa,CACX,mEADW,EAEXF,MAFW,CAFP,EAMR,IANQ,CAAV;AAQAc,UAAU,CAAC,MAAMzB,YAAY,EAAnB,EAAuB,IAAvB,CAAV","file":"backup.e31bb0bc.js","sourceRoot":"..","sourcesContent":["module.exports = nanographql\n\nvar getOpname = /(query|mutation) ?([\\w\\d-_]+)? ?\\(.*?\\)? \\{/\n\nfunction nanographql (str) {\n  str = Array.isArray(str) ? str.join('') : str\n  var name = getOpname.exec(str)\n  return function (variables) {\n    var data = { query: str }\n    if (variables) data.variables = JSON.stringify(variables)\n    if (name && name.length) {\n      var operationName = name[2]\n      if (operationName) data.operationName = name[2]\n    }\n    return JSON.stringify(data)\n  }\n}\n","// import swivel from 'swivel'\r\nconst gql = require('nanographql')\r\n\r\nif (!('serviceWorker' in navigator)) {\r\n  return\r\n}\r\n\r\nconst appendCensus = async () => {\r\n  const res = await fetch(\r\n    'https://api.census.gov/data/2017/acs/acs5?get=NAME,B01001_001E&for=state:*'\r\n  )\r\n  const data = await res.json()\r\n  document.body.append(JSON.stringify(data, null, 2))\r\n}\r\n\r\nconst query1 = gql`\r\n  query {\r\n    allCinemaDetails(before: \"2017-10-04\", after: \"2010-01-01\") {\r\n      edges {\r\n        node {\r\n          slug\r\n          hallName\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\nconst query2 = gql`\r\n  query {\r\n    stationWithEvaId(evaId: 8000105) {\r\n      name\r\n      location {\r\n        latitude\r\n        longitude\r\n      }\r\n      picture {\r\n        url\r\n      }\r\n    }\r\n  }\r\n`\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Connection': 'keep-alive',\r\n  'Content-Type': 'application/json',\r\n}\r\n\r\nconst appendGraphQL = async (url, query) => {\r\n  // console.log('query():', query())\r\n  try {\r\n    const res = await fetch(`${url}?${query()}`.replace(/\\s+|\\\\n|\\\"/g, ''), {\r\n      body: query(),\r\n      method: 'POST',\r\n      // mode: 'cors',\r\n      headers,\r\n    })\r\n    const data = await res.json()\r\n    document.body.append(JSON.stringify(data, null, 2))\r\n  } catch (err) {\r\n    console.error('ERROR In graqphl fetch:', err)\r\n  }\r\n}\r\n\r\nnavigator.serviceWorker\r\n  .register('sw.js')\r\n  .then(navigator.serviceWorker.ready)\r\n  .then(function() {\r\n    // swivel.on('data', function handler(context, ...data) {\r\n    //   console.log('swivel `context`:', context)\r\n    //   console.log('swivel `data`:', data)\r\n    //   context.reply('data', 'BLOOP')\r\n    // })\r\n    appendGraphQL('https://etmdb.com/graphql', query1)\r\n    appendCensus()\r\n  })\r\n\r\nsetTimeout(() => appendGraphQL('https://etmdb.com/graphql', query1), 3000)\r\nsetTimeout(\r\n  () =>\r\n    appendGraphQL(\r\n      'https://cors-e.herokuapp.com/https://bahnql.herokuapp.com/graphql',\r\n      query2\r\n    ),\r\n  3000\r\n)\r\nsetTimeout(() => appendCensus(), 6000)\r\n"]}